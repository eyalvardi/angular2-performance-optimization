/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
 /* tslint:disable */

import * as import0 from '@angular/core/src/render/api';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/linker/element';
import * as import3 from '../../../app/demos/home.component';
import * as import4 from '@angular/core/src/linker/view_utils';
import * as import5 from '@angular/core/src/di/injector';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/change_detection';
import * as import8 from '@angular/core/src/metadata/view';
import * as import9 from '@angular/core/src/linker/component_factory';
var renderType_HomeComponent_Host:import0.RenderComponentType = (null as any);
class _View_HomeComponent_Host0 extends import1.AppView<any> {
  _el_0:any;
  /*private*/ _appEl_0:import2.AppElement;
  _HomeComponent_0_4:import3.HomeComponent;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_HomeComponent_Host0,renderType_HomeComponent_Host,import6.ViewType.HOST,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    this._el_0 = this.selectOrCreateHostElement('ng-component',rootSelector,(null as any));
    this._appEl_0 = new import2.AppElement(0,(null as any),this,this._el_0);
    var compView_0:any = viewFactory_HomeComponent0(this.viewUtils,this.injector(0),this._appEl_0);
    this._HomeComponent_0_4 = new import3.HomeComponent();
    this._appEl_0.initComponent(this._HomeComponent_0_4,([] as any[]),compView_0);
    compView_0.create(this._HomeComponent_0_4,this.projectableNodes,(null as any));
    this.init(([] as any[]).concat([this._el_0]),[this._el_0],([] as any[]),([] as any[]));
    return this._appEl_0;
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import3.HomeComponent) && (0 === requestNodeIndex))) { return this._HomeComponent_0_4; }
    return notFoundResult;
  }
}
function viewFactory_HomeComponent_Host0(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<any> {
  if ((renderType_HomeComponent_Host === (null as any))) { (renderType_HomeComponent_Host = viewUtils.createRenderComponentType('',0,import8.ViewEncapsulation.None,([] as any[]),{})); }
  return new _View_HomeComponent_Host0(viewUtils,parentInjector,declarationEl);
}
export const HomeComponentNgFactory:import9.ComponentFactory<import3.HomeComponent> = new import9.ComponentFactory<import3.HomeComponent>('ng-component',viewFactory_HomeComponent_Host0,import3.HomeComponent);
const styles_HomeComponent:any[] = ([] as any[]);
var renderType_HomeComponent:import0.RenderComponentType = (null as any);
class _View_HomeComponent0 extends import1.AppView<import3.HomeComponent> {
  _text_0:any;
  _el_1:any;
  _text_2:any;
  _el_3:any;
  _text_4:any;
  _el_5:any;
  _text_6:any;
  _el_7:any;
  _text_8:any;
  _text_9:any;
  _el_10:any;
  _text_11:any;
  _el_12:any;
  _text_13:any;
  _text_14:any;
  _text_15:any;
  _el_16:any;
  _text_17:any;
  _el_18:any;
  _text_19:any;
  _text_20:any;
  _el_21:any;
  _text_22:any;
  _el_23:any;
  _text_24:any;
  _el_25:any;
  _text_26:any;
  _el_27:any;
  _text_28:any;
  _text_29:any;
  _el_30:any;
  _text_31:any;
  _el_32:any;
  _text_33:any;
  _text_34:any;
  _el_35:any;
  _text_36:any;
  _text_37:any;
  _text_38:any;
  _el_39:any;
  _text_40:any;
  _text_41:any;
  _el_42:any;
  _text_43:any;
  _el_44:any;
  _text_45:any;
  _text_46:any;
  _el_47:any;
  _text_48:any;
  _el_49:any;
  _text_50:any;
  _text_51:any;
  _el_52:any;
  _text_53:any;
  _text_54:any;
  _text_55:any;
  _el_56:any;
  _text_57:any;
  _text_58:any;
  _el_59:any;
  _text_60:any;
  _el_61:any;
  _text_62:any;
  _text_63:any;
  _el_64:any;
  _text_65:any;
  _el_66:any;
  _text_67:any;
  _text_68:any;
  _text_69:any;
  _el_70:any;
  _text_71:any;
  _text_72:any;
  _text_73:any;
  _el_74:any;
  _text_75:any;
  _text_76:any;
  _el_77:any;
  _text_78:any;
  _el_79:any;
  _text_80:any;
  _el_81:any;
  _text_82:any;
  _text_83:any;
  _el_84:any;
  _text_85:any;
  _el_86:any;
  _text_87:any;
  _text_88:any;
  _text_89:any;
  _el_90:any;
  _text_91:any;
  _text_92:any;
  _el_93:any;
  _text_94:any;
  _el_95:any;
  _text_96:any;
  _text_97:any;
  _el_98:any;
  _text_99:any;
  _el_100:any;
  _text_101:any;
  _text_102:any;
  _text_103:any;
  _text_104:any;
  _text_105:any;
  _text_106:any;
  _text_107:any;
  constructor(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement) {
    super(_View_HomeComponent0,renderType_HomeComponent,import6.ViewType.COMPONENT,viewUtils,parentInjector,declarationEl,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import2.AppElement {
    const parentRenderNode:any = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    this._el_1 = this.renderer.createElement(parentRenderNode,'div',(null as any));
    this._text_2 = this.renderer.createText(this._el_1,'\n        ',(null as any));
    this._el_3 = this.renderer.createElement(this._el_1,'div',(null as any));
    this.renderer.setElementAttribute(this._el_3,'class','starter-template');
    this._text_4 = this.renderer.createText(this._el_3,'\n            ',(null as any));
    this._el_5 = this.renderer.createElement(this._el_3,'a',(null as any));
    this.renderer.setElementAttribute(this._el_5,'href','http://ng-course.org');
    this.renderer.setElementAttribute(this._el_5,'target','_blank');
    this._text_6 = this.renderer.createText(this._el_5,'\n                ',(null as any));
    this._el_7 = this.renderer.createElement(this._el_5,'img',(null as any));
    this.renderer.setElementAttribute(this._el_7,'src','images/ng-course.png');
    this.renderer.setElementAttribute(this._el_7,'width','500');
    this._text_8 = this.renderer.createText(this._el_5,'\n            ',(null as any));
    this._text_9 = this.renderer.createText(this._el_3,'\n            ',(null as any));
    this._el_10 = this.renderer.createElement(this._el_3,'br',(null as any));
    this._text_11 = this.renderer.createText(this._el_3,'\n           ',(null as any));
    this._el_12 = this.renderer.createElement(this._el_3,'h3',(null as any));
    this._text_13 = this.renderer.createText(this._el_12,'Angular 2 - Performance Optimization',(null as any));
    this._text_14 = this.renderer.createText(this._el_3,'\n           ',(null as any));
    this._text_15 = this.renderer.createText(this._el_3,'\n           ',(null as any));
    this._el_16 = this.renderer.createElement(this._el_3,'br',(null as any));
    this._text_17 = this.renderer.createText(this._el_3,'\n           ',(null as any));
    this._el_18 = this.renderer.createElement(this._el_3,'h4',(null as any));
    this._text_19 = this.renderer.createText(this._el_18,'High Frequency Problem (tick):',(null as any));
    this._text_20 = this.renderer.createText(this._el_3,'\n           ',(null as any));
    this._el_21 = this.renderer.createElement(this._el_3,'ol',(null as any));
    this._text_22 = this.renderer.createText(this._el_21,'\n                ',(null as any));
    this._el_23 = this.renderer.createElement(this._el_21,'li',(null as any));
    this._text_24 = this.renderer.createText(this._el_23,'\n                   ',(null as any));
    this._el_25 = this.renderer.createElement(this._el_23,'img',(null as any));
    this.renderer.setElementAttribute(this._el_25,'align','right');
    this.renderer.setElementAttribute(this._el_25,'height','200');
    this.renderer.setElementAttribute(this._el_25,'src','images/n_counters.png');
    this._text_26 = this.renderer.createText(this._el_23,'\n                   ',(null as any));
    this._el_27 = this.renderer.createElement(this._el_23,'h4',(null as any));
    this._text_28 = this.renderer.createText(this._el_27,'Counter demo:',(null as any));
    this._text_29 = this.renderer.createText(this._el_23,'\n                   ',(null as any));
    this._el_30 = this.renderer.createElement(this._el_23,'div',(null as any));
    this._text_31 = this.renderer.createText(this._el_30,'                \n                        ',(null as any));
    this._el_32 = this.renderer.createElement(this._el_30,'p',(null as any));
    this._text_33 = this.renderer.createText(this._el_32,'\n                            This demo shows how we can stop the tick that setTimeout causes by \n                            using NgZone class and how to update the component area with \n                            ChangeDetectorRef class. By doing so we improve the performance because \n                            we reduce the tick frequency, meaning less calculations per second. \n                        ',(null as any));
    this._text_34 = this.renderer.createText(this._el_30,'\n                        ',(null as any));
    this._el_35 = this.renderer.createElement(this._el_30,'p',(null as any));
    this._text_36 = this.renderer.createText(this._el_35,'\n                            When we use this approach we are limited by the number of counters \n                            that we can put on the page. Each counter uses on setTimeout function \n                            and this can cause the UI thread queue to be overloaded.\n                        ',(null as any));
    this._text_37 = this.renderer.createText(this._el_30,'                   \n                   ',(null as any));
    this._text_38 = this.renderer.createText(this._el_23,'\n                   ',(null as any));
    this._el_39 = this.renderer.createElement(this._el_23,'br',(null as any));
    this._text_40 = this.renderer.createText(this._el_23,'\n                ',(null as any));
    this._text_41 = this.renderer.createText(this._el_21,'\n                ',(null as any));
    this._el_42 = this.renderer.createElement(this._el_21,'li',(null as any));
    this._text_43 = this.renderer.createText(this._el_42,'\n                    ',(null as any));
    this._el_44 = this.renderer.createElement(this._el_42,'h4',(null as any));
    this._text_45 = this.renderer.createText(this._el_44,'Board demo:',(null as any));
    this._text_46 = this.renderer.createText(this._el_42,'\n                   ',(null as any));
    this._el_47 = this.renderer.createElement(this._el_42,'div',(null as any));
    this._text_48 = this.renderer.createText(this._el_47,'\n                        ',(null as any));
    this._el_49 = this.renderer.createElement(this._el_47,'p',(null as any));
    this._text_50 = this.renderer.createText(this._el_49,'\n                            This demo shows how we use only 1 setTimeout in the parent \n                            component to update all its children. Now we can put many more \n                            counters on the page. We will continue to use NgZone to stop the tick.\n                        ',(null as any));
    this._text_51 = this.renderer.createText(this._el_47,'\n                        ',(null as any));
    this._el_52 = this.renderer.createElement(this._el_47,'p',(null as any));
    this._text_53 = this.renderer.createText(this._el_52,'\n                            If the execute handler of the setTimeout takes too long because\n                            we are updating too many counters, the UI will be stuck.\n                        ',(null as any));
    this._text_54 = this.renderer.createText(this._el_47,'                \n                   ',(null as any));
    this._text_55 = this.renderer.createText(this._el_42,'        \n                   ',(null as any));
    this._el_56 = this.renderer.createElement(this._el_42,'br',(null as any));
    this._text_57 = this.renderer.createText(this._el_42,'\n                ',(null as any));
    this._text_58 = this.renderer.createText(this._el_21,'\n                ',(null as any));
    this._el_59 = this.renderer.createElement(this._el_21,'li',(null as any));
    this._text_60 = this.renderer.createText(this._el_59,'\n                   ',(null as any));
    this._el_61 = this.renderer.createElement(this._el_59,'h4',(null as any));
    this._text_62 = this.renderer.createText(this._el_61,'Accordion demo:',(null as any));
    this._text_63 = this.renderer.createText(this._el_59,'\n                   ',(null as any));
    this._el_64 = this.renderer.createElement(this._el_59,'div',(null as any));
    this._text_65 = this.renderer.createText(this._el_64,'\n                        ',(null as any));
    this._el_66 = this.renderer.createElement(this._el_64,'p',(null as any));
    this._text_67 = this.renderer.createText(this._el_66,'\n                            This demo shows how we can stop the tick that happens because a click event. \n                            In this approach we can\'t register an event in the template because we need\n                            to use the NgZone class.\n                        ',(null as any));
    this._text_68 = this.renderer.createText(this._el_64,'                              \n                   ',(null as any));
    this._text_69 = this.renderer.createText(this._el_59,'\n                   ',(null as any));
    this._el_70 = this.renderer.createElement(this._el_59,'br',(null as any));
    this._text_71 = this.renderer.createText(this._el_59,'\n               ',(null as any));
    this._text_72 = this.renderer.createText(this._el_21,'\n           ',(null as any));
    this._text_73 = this.renderer.createText(this._el_3,'\n           ',(null as any));
    this._el_74 = this.renderer.createElement(this._el_3,'h4',(null as any));
    this._text_75 = this.renderer.createText(this._el_74,'High Expressions Problem:',(null as any));
    this._text_76 = this.renderer.createText(this._el_3,'\n           ',(null as any));
    this._el_77 = this.renderer.createElement(this._el_3,'ol',(null as any));
    this._text_78 = this.renderer.createText(this._el_77,'\n           ',(null as any));
    this._el_79 = this.renderer.createElement(this._el_77,'li',(null as any));
    this._text_80 = this.renderer.createText(this._el_79,'\n           ',(null as any));
    this._el_81 = this.renderer.createElement(this._el_79,'h4',(null as any));
    this._text_82 = this.renderer.createText(this._el_81,'On-Push demo:',(null as any));
    this._text_83 = this.renderer.createText(this._el_79,'\n           ',(null as any));
    this._el_84 = this.renderer.createElement(this._el_79,'div',(null as any));
    this._text_85 = this.renderer.createText(this._el_84,'\n                ',(null as any));
    this._el_86 = this.renderer.createElement(this._el_84,'p',(null as any));
    this._text_87 = this.renderer.createText(this._el_86,'\n                    This demo shows how to reduce the amount of expressions that need to calculate \n                    every tick by using the on-push strategy. The on-push strategy will calculate \n                    the component expressions only if the input has changed.\n                ',(null as any));
    this._text_88 = this.renderer.createText(this._el_84,'                              \n           ',(null as any));
    this._text_89 = this.renderer.createText(this._el_79,'\n           ',(null as any));
    this._el_90 = this.renderer.createElement(this._el_79,'br',(null as any));
    this._text_91 = this.renderer.createText(this._el_79,'\n           ',(null as any));
    this._text_92 = this.renderer.createText(this._el_77,'\n           ',(null as any));
    this._el_93 = this.renderer.createElement(this._el_77,'li',(null as any));
    this._text_94 = this.renderer.createText(this._el_93,'\n           ',(null as any));
    this._el_95 = this.renderer.createElement(this._el_93,'h4',(null as any));
    this._text_96 = this.renderer.createText(this._el_95,'On-Dirty demo:',(null as any));
    this._text_97 = this.renderer.createText(this._el_93,'\n           ',(null as any));
    this._el_98 = this.renderer.createElement(this._el_93,'div',(null as any));
    this._text_99 = this.renderer.createText(this._el_98,'\n                ',(null as any));
    this._el_100 = this.renderer.createElement(this._el_98,'p',(null as any));
    this._text_101 = this.renderer.createText(this._el_100,'\n                    This demo shows how we can work with an Observable class and its operators to reduce the amount of\n                    updates, meaning less expressions to calculate. The component is detached form the component tree and the update happens\n                    only when item comes up from the observable.\n                ',(null as any));
    this._text_102 = this.renderer.createText(this._el_98,'                              \n           ',(null as any));
    this._text_103 = this.renderer.createText(this._el_93,'\n           ',(null as any));
    this._text_104 = this.renderer.createText(this._el_77,'\n           ',(null as any));
    this._text_105 = this.renderer.createText(this._el_3,'\n        ',(null as any));
    this._text_106 = this.renderer.createText(this._el_1,'\n  ',(null as any));
    this._text_107 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    this.init(([] as any[]),[
      this._text_0,
      this._el_1,
      this._text_2,
      this._el_3,
      this._text_4,
      this._el_5,
      this._text_6,
      this._el_7,
      this._text_8,
      this._text_9,
      this._el_10,
      this._text_11,
      this._el_12,
      this._text_13,
      this._text_14,
      this._text_15,
      this._el_16,
      this._text_17,
      this._el_18,
      this._text_19,
      this._text_20,
      this._el_21,
      this._text_22,
      this._el_23,
      this._text_24,
      this._el_25,
      this._text_26,
      this._el_27,
      this._text_28,
      this._text_29,
      this._el_30,
      this._text_31,
      this._el_32,
      this._text_33,
      this._text_34,
      this._el_35,
      this._text_36,
      this._text_37,
      this._text_38,
      this._el_39,
      this._text_40,
      this._text_41,
      this._el_42,
      this._text_43,
      this._el_44,
      this._text_45,
      this._text_46,
      this._el_47,
      this._text_48,
      this._el_49,
      this._text_50,
      this._text_51,
      this._el_52,
      this._text_53,
      this._text_54,
      this._text_55,
      this._el_56,
      this._text_57,
      this._text_58,
      this._el_59,
      this._text_60,
      this._el_61,
      this._text_62,
      this._text_63,
      this._el_64,
      this._text_65,
      this._el_66,
      this._text_67,
      this._text_68,
      this._text_69,
      this._el_70,
      this._text_71,
      this._text_72,
      this._text_73,
      this._el_74,
      this._text_75,
      this._text_76,
      this._el_77,
      this._text_78,
      this._el_79,
      this._text_80,
      this._el_81,
      this._text_82,
      this._text_83,
      this._el_84,
      this._text_85,
      this._el_86,
      this._text_87,
      this._text_88,
      this._text_89,
      this._el_90,
      this._text_91,
      this._text_92,
      this._el_93,
      this._text_94,
      this._el_95,
      this._text_96,
      this._text_97,
      this._el_98,
      this._text_99,
      this._el_100,
      this._text_101,
      this._text_102,
      this._text_103,
      this._text_104,
      this._text_105,
      this._text_106,
      this._text_107
    ]
    ,([] as any[]),([] as any[]));
    return (null as any);
  }
}
export function viewFactory_HomeComponent0(viewUtils:import4.ViewUtils,parentInjector:import5.Injector,declarationEl:import2.AppElement):import1.AppView<import3.HomeComponent> {
  if ((renderType_HomeComponent === (null as any))) { (renderType_HomeComponent = viewUtils.createRenderComponentType('',0,import8.ViewEncapsulation.None,styles_HomeComponent,{})); }
  return new _View_HomeComponent0(viewUtils,parentInjector,declarationEl);
}